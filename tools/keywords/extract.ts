import * as cheerio from 'cheerio';
import * as fs from 'fs';
import * as path from 'path';

// Read keywords.html file
const htmlFilePath = path.join(__dirname, 'keywords.html');
const htmlContent = fs.readFileSync(htmlFilePath, 'utf-8');

// Parse HTML content using cheerio
const $ = cheerio.load(htmlContent);

// Extract keywords
const keywords: string[] = [];
$('.simplesect').each((_, section) => {
  const sectionTitle = $(section)
    .find('.titlepage .title')
    .text()
    .trim();
  if (sectionTitle === 'MySQL 9.0 Keywords and Reserved Words') {
    $(section)
      .find('div.itemizedlist ul.itemizedlist li.listitem p code.literal')
      .each((_, element) => {
        const keyword = $(element).text();
        keywords.push(keyword);
      });
  }
});

// Generate content for src/keywords.ts file
const keywordsFileContent = `/**
 * This file is automatically generated by the script tools/keywords/extract.ts
 *
 * @see ./tools/keywords/keywords.html
 * @see tools/keywords/extract.ts
 * @type {string[]}
 */
const keywords: string[] = [
${keywords.map(keyword => `  '${keyword}',`).join('\n')}
];

export default keywords;
`;

// Write to src/keywords.ts file
const keywordsFilePath = path.join(__dirname, '../../src/keywords.ts');
fs.writeFileSync(keywordsFilePath, keywordsFileContent.trim() + '\n', 'utf-8');

console.log('ðŸ”¥ Keywords have been successfully extracted and written to src/keywords.ts.');
